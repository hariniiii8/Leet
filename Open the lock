BFS:

class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        queue<string> q;
        map<string,bool> vis;
        int level=0;
        q.push("0000");
        vis["0000"]=true;
        set<string> dead(deadends.begin(),deadends.end());
        while(!q.empty())
        {
int size=q.size();
while(size--)
{
    string s=q.front();
    q.pop();
    if(s==target)
    {
        return level;
    }
    if(dead.find(s)!=dead.end()){
        continue;
    }

    for(auto it:options(s))
    {
        if(!vis[it])
        {
            q.push(it);
            vis[it]=true;
        }
    }
}
level++;
        }
        return -1;
        
    }
    char goBack(char ch)
    {
        if(ch=='0')
        {
            return '9';
        }
        return ch-1;
    }
    char goFront(char ch)
    {
        if(ch=='9')
        {
            return '0';
        }
        return ch+1;
    }
    vector<string> options(string s)
    {
        vector<string> ans;
        for(int i=0;i<s.size();i++)
        {
            char ch=s[i];
            string copy=s;
            copy[i]=goBack(ch);
ans.push_back(copy);
copy=s;
copy[i]=goFront(ch);
ans.push_back(copy);
        }
        return ans;
    }
};
